
package pt.faults.ws;

import java.util.List;
import javax.jws.HandlerChain;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import pt.registofatura.ws.ItemFatura;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "FaultsPortType", targetNamespace = "urn:pt:faults:ws")
@HandlerChain(file = "FaultsPortType_handler.xml")
@XmlSeeAlso({
    pt.faults.ws.ObjectFactory.class,
    pt.registofatura.ws.ObjectFactory.class
})
public interface FaultsPortType {


    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(name = "grandfather", targetNamespace = "")
    @RequestWrapper(localName = "imAlive", targetNamespace = "urn:pt:faults:ws", className = "pt.faults.ws.ImAlive")
    @ResponseWrapper(localName = "imAliveResponse", targetNamespace = "urn:pt:faults:ws", className = "pt.faults.ws.ImAliveResponse")
    public int imAlive();

    /**
     * 
     * @param notUsed
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(name = "last", targetNamespace = "")
    @RequestWrapper(localName = "getLastServer", targetNamespace = "urn:pt:faults:ws", className = "pt.faults.ws.GetLastServer")
    @ResponseWrapper(localName = "getLastServerResponse", targetNamespace = "urn:pt:faults:ws", className = "pt.faults.ws.GetLastServerResponse")
    public int getLastServer(
        @WebParam(name = "notUsed", targetNamespace = "")
        boolean notUsed);

    /**
     * 
     * @param son
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "connectTo", targetNamespace = "urn:pt:faults:ws", className = "pt.faults.ws.ConnectTo")
    public void connectTo(
        @WebParam(name = "son", targetNamespace = "")
        int son);

    /**
     * 
     * @param nifEmissor
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "pedirSerie", targetNamespace = "urn:pt:registofatura:ws", className = "pt.registofatura.ws.PedirSerie")
    public void pedirSerie(
        @WebParam(name = "nifEmissor", targetNamespace = "")
        int nifEmissor);

    /**
     * 
     * @param total
     * @param iva
     * @param nifEmissor
     * @param data
     * @param numSerie
     * @param nifCliente
     * @param itens
     * @param numSeqFatura
     * @param nomeEmissor
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "comunicarFatura", targetNamespace = "urn:pt:registofatura:ws", className = "pt.registofatura.ws.Fatura")
    public void comunicarFatura(
        @WebParam(name = "data", targetNamespace = "")
        XMLGregorianCalendar data,
        @WebParam(name = "numSeqFatura", targetNamespace = "")
        int numSeqFatura,
        @WebParam(name = "numSerie", targetNamespace = "")
        int numSerie,
        @WebParam(name = "nifEmissor", targetNamespace = "")
        int nifEmissor,
        @WebParam(name = "nomeEmissor", targetNamespace = "")
        String nomeEmissor,
        @WebParam(name = "nifCliente", targetNamespace = "")
        Integer nifCliente,
        @WebParam(name = "itens", targetNamespace = "")
        List<ItemFatura> itens,
        @WebParam(name = "iva", targetNamespace = "")
        int iva,
        @WebParam(name = "total", targetNamespace = "")
        int total);

    /**
     * 
     * @param notUsed
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(name = "ticket", targetNamespace = "")
    @RequestWrapper(localName = "ticket", targetNamespace = "urn:pt:faults:ws", className = "pt.faults.ws.Ticket")
    @ResponseWrapper(localName = "ticketResponse", targetNamespace = "urn:pt:faults:ws", className = "pt.faults.ws.TicketResponse")
    public int ticket(
        @WebParam(name = "notUsed", targetNamespace = "")
        boolean notUsed);

}
